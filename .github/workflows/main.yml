name: Deploy WebGL to GitHub Pages

on:
  push:
    branches:
      - main  # Change this to your default branch if it's not main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Create server script and Install dependencies
        run: |
          cat << 'EOF' > server.js
          const https = require('https');
          const express = require('express');
          const forge = require('node-forge');

          (function main() {
            const server = https.createServer(
              generateX509Certificate([
                { type: 6, value: 'http://localhost' },
                { type: 7, ip: '127.0.0.1' }
              ]), 
              makeExpressApp()
            );
            server.listen(8080, () => {
              console.log('Listening on https://localhost:8080/');
            });
          })();

          function generateX509Certificate(altNames) {
            const issuer = [
              { name: 'commonName', value: 'example.com' },
              { name: 'organizationName', value: 'E Corp' },
              { name: 'organizationalUnitName', value: 'Washington Township Plant' }
            ];
            const certificateExtensions = [
              { name: 'basicConstraints', cA: true },
              { name: 'keyUsage', keyCertSign: true, digitalSignature: true, nonRepudiation: true, keyEncipherment: true, dataEncipherment: true },
              { name: 'extKeyUsage', serverAuth: true, clientAuth: true, codeSigning: true, emailProtection: true, timeStamping: true },
              { name: 'nsCertType', client: true, server: true, email: true, objsign: true, sslCA: true, emailCA: true, objCA: true },
              { name: 'subjectAltName', altNames },
              { name: 'subjectKeyIdentifier' }
            ];
            const keys = forge.pki.rsa.generateKeyPair(2048);
            const cert = forge.pki.createCertificate();
            cert.validity.notBefore = new Date();
            cert.validity.notAfter = new Date();
            cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 1);
            cert.publicKey = keys.publicKey;
            cert.setSubject(issuer);
            cert.setIssuer(issuer);
            cert.setExtensions(certificateExtensions);
            cert.sign(keys.privateKey);
            return {
              key: forge.pki.privateKeyToPem(keys.privateKey),
              cert: forge.pki.certificateToPem(cert)
            };
          }

          function makeExpressApp() {
            const app = express();
            const expressStaticGzip = require('express-static-gzip');
            app.use('/', expressStaticGzip(__dirname + '/Build', {
              enableBrotli: true,
              orderPreference: ['br', 'gzip'],
              setHeaders: (res, path) => {
                if (path.endsWith('.br')) {
                  res.setHeader('Content-Encoding', 'br');
                  res.setHeader('Content-Type', 'application/wasm');
                } else if (path.endsWith('.gz')) {
                  res.setHeader('Content-Type', 'application/wasm');
                  res.setHeader('Content-Encoding', 'gzip');
                }
              }
            }));
            return app;
          }
          EOF

      - name: Install dependencies
        run: npm install express express-static-gzip node-forge

      - name: Run local server with Brotli support (for testing)
        run: |
          node server.js &

      - name: Wait for 10 seconds to allow server to start
        run: sleep 10

      - name: Test WebGL Build
        run: curl -k -I https://localhost:8080

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./Build
          publish_branch: gh-pages
